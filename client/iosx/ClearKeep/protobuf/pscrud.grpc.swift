//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: pscrud.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf


/// Usage: instantiate Grpc_PscrudClient, then call methods of this protocol to make API calls.
internal protocol Grpc_PscrudClientProtocol {
  func register(_ request: Grpc_AuthRequest, callOptions: CallOptions?) -> UnaryCall<Grpc_AuthRequest, Grpc_AuthResponse>
  func login(_ request: Grpc_AuthRequest, callOptions: CallOptions?) -> UnaryCall<Grpc_AuthRequest, Grpc_AuthResponse>
  func authenticate(_ request: Grpc_Request, callOptions: CallOptions?) -> UnaryCall<Grpc_Request, Grpc_AuthResponse>
  func logout(_ request: Grpc_Request, callOptions: CallOptions?) -> UnaryCall<Grpc_Request, Grpc_Response>
  func deregister(_ request: Grpc_Request, callOptions: CallOptions?) -> UnaryCall<Grpc_Request, Grpc_Response>
  func create(_ request: Grpc_PutRequest, callOptions: CallOptions?) -> UnaryCall<Grpc_PutRequest, Grpc_PutResponse>
  func read(_ request: Grpc_GetRequest, callOptions: CallOptions?) -> UnaryCall<Grpc_GetRequest, Grpc_GetResponse>
  func update(_ request: Grpc_PutRequest, callOptions: CallOptions?) -> UnaryCall<Grpc_PutRequest, Grpc_PutResponse>
  func delete(_ request: Grpc_GetRequest, callOptions: CallOptions?) -> UnaryCall<Grpc_GetRequest, Grpc_Response>
  func subscribe(_ request: Grpc_SubscribeRequest, callOptions: CallOptions?) -> UnaryCall<Grpc_SubscribeRequest, Grpc_Response>
  func unsubscribe(_ request: Grpc_SubscribeRequest, callOptions: CallOptions?) -> UnaryCall<Grpc_SubscribeRequest, Grpc_Response>
  func publish(_ request: Grpc_PublishRequest, callOptions: CallOptions?) -> UnaryCall<Grpc_PublishRequest, Grpc_Response>
  func listen(_ request: Grpc_Request, callOptions: CallOptions?, handler: @escaping (Grpc_Publication) -> Void) -> ServerStreamingCall<Grpc_Request, Grpc_Publication>
}

internal final class Grpc_PscrudClient: GRPCClient, Grpc_PscrudClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the grpc.Pscrud service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }

  /// Unary call to Register
  ///
  /// - Parameters:
  ///   - request: Request to send to Register.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func register(_ request: Grpc_AuthRequest, callOptions: CallOptions? = nil) -> UnaryCall<Grpc_AuthRequest, Grpc_AuthResponse> {
    return self.makeUnaryCall(path: "/grpc.Pscrud/Register",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Unary call to Login
  ///
  /// - Parameters:
  ///   - request: Request to send to Login.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func login(_ request: Grpc_AuthRequest, callOptions: CallOptions? = nil) -> UnaryCall<Grpc_AuthRequest, Grpc_AuthResponse> {
    return self.makeUnaryCall(path: "/grpc.Pscrud/Login",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Unary call to Authenticate
  ///
  /// - Parameters:
  ///   - request: Request to send to Authenticate.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func authenticate(_ request: Grpc_Request, callOptions: CallOptions? = nil) -> UnaryCall<Grpc_Request, Grpc_AuthResponse> {
    return self.makeUnaryCall(path: "/grpc.Pscrud/Authenticate",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Unary call to Logout
  ///
  /// - Parameters:
  ///   - request: Request to send to Logout.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func logout(_ request: Grpc_Request, callOptions: CallOptions? = nil) -> UnaryCall<Grpc_Request, Grpc_Response> {
    return self.makeUnaryCall(path: "/grpc.Pscrud/Logout",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Unary call to Deregister
  ///
  /// - Parameters:
  ///   - request: Request to send to Deregister.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deregister(_ request: Grpc_Request, callOptions: CallOptions? = nil) -> UnaryCall<Grpc_Request, Grpc_Response> {
    return self.makeUnaryCall(path: "/grpc.Pscrud/Deregister",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Unary call to Create
  ///
  /// - Parameters:
  ///   - request: Request to send to Create.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func create(_ request: Grpc_PutRequest, callOptions: CallOptions? = nil) -> UnaryCall<Grpc_PutRequest, Grpc_PutResponse> {
    return self.makeUnaryCall(path: "/grpc.Pscrud/Create",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Unary call to Read
  ///
  /// - Parameters:
  ///   - request: Request to send to Read.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func read(_ request: Grpc_GetRequest, callOptions: CallOptions? = nil) -> UnaryCall<Grpc_GetRequest, Grpc_GetResponse> {
    return self.makeUnaryCall(path: "/grpc.Pscrud/Read",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Unary call to Update
  ///
  /// - Parameters:
  ///   - request: Request to send to Update.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func update(_ request: Grpc_PutRequest, callOptions: CallOptions? = nil) -> UnaryCall<Grpc_PutRequest, Grpc_PutResponse> {
    return self.makeUnaryCall(path: "/grpc.Pscrud/Update",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Unary call to Delete
  ///
  /// - Parameters:
  ///   - request: Request to send to Delete.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func delete(_ request: Grpc_GetRequest, callOptions: CallOptions? = nil) -> UnaryCall<Grpc_GetRequest, Grpc_Response> {
    return self.makeUnaryCall(path: "/grpc.Pscrud/Delete",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Unary call to Subscribe
  ///
  /// - Parameters:
  ///   - request: Request to send to Subscribe.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func subscribe(_ request: Grpc_SubscribeRequest, callOptions: CallOptions? = nil) -> UnaryCall<Grpc_SubscribeRequest, Grpc_Response> {
    return self.makeUnaryCall(path: "/grpc.Pscrud/Subscribe",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Unary call to Unsubscribe
  ///
  /// - Parameters:
  ///   - request: Request to send to Unsubscribe.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unsubscribe(_ request: Grpc_SubscribeRequest, callOptions: CallOptions? = nil) -> UnaryCall<Grpc_SubscribeRequest, Grpc_Response> {
    return self.makeUnaryCall(path: "/grpc.Pscrud/Unsubscribe",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Unary call to Publish
  ///
  /// - Parameters:
  ///   - request: Request to send to Publish.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func publish(_ request: Grpc_PublishRequest, callOptions: CallOptions? = nil) -> UnaryCall<Grpc_PublishRequest, Grpc_Response> {
    return self.makeUnaryCall(path: "/grpc.Pscrud/Publish",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Server streaming call to Listen
  ///
  /// - Parameters:
  ///   - request: Request to send to Listen.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func listen(_ request: Grpc_Request, callOptions: CallOptions? = nil, handler: @escaping (Grpc_Publication) -> Void) -> ServerStreamingCall<Grpc_Request, Grpc_Publication> {
    return self.makeServerStreamingCall(path: "/grpc.Pscrud/Listen",
                                        request: request,
                                        callOptions: callOptions ?? self.defaultCallOptions,
                                        handler: handler)
  }

}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Grpc_PscrudProvider: CallHandlerProvider {
  func register(request: Grpc_AuthRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Grpc_AuthResponse>
  func login(request: Grpc_AuthRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Grpc_AuthResponse>
  func authenticate(request: Grpc_Request, context: StatusOnlyCallContext) -> EventLoopFuture<Grpc_AuthResponse>
  func logout(request: Grpc_Request, context: StatusOnlyCallContext) -> EventLoopFuture<Grpc_Response>
  func deregister(request: Grpc_Request, context: StatusOnlyCallContext) -> EventLoopFuture<Grpc_Response>
  func create(request: Grpc_PutRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Grpc_PutResponse>
  func read(request: Grpc_GetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Grpc_GetResponse>
  func update(request: Grpc_PutRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Grpc_PutResponse>
  func delete(request: Grpc_GetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Grpc_Response>
  func subscribe(request: Grpc_SubscribeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Grpc_Response>
  func unsubscribe(request: Grpc_SubscribeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Grpc_Response>
  func publish(request: Grpc_PublishRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Grpc_Response>
  func listen(request: Grpc_Request, context: StreamingResponseCallContext<Grpc_Publication>) -> EventLoopFuture<GRPCStatus>
}

extension Grpc_PscrudProvider {
  internal var serviceName: String { return "grpc.Pscrud" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handleMethod(_ methodName: String, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "Register":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.register(request: request, context: context)
        }
      }

    case "Login":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.login(request: request, context: context)
        }
      }

    case "Authenticate":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.authenticate(request: request, context: context)
        }
      }

    case "Logout":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.logout(request: request, context: context)
        }
      }

    case "Deregister":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deregister(request: request, context: context)
        }
      }

    case "Create":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.create(request: request, context: context)
        }
      }

    case "Read":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.read(request: request, context: context)
        }
      }

    case "Update":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.update(request: request, context: context)
        }
      }

    case "Delete":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.delete(request: request, context: context)
        }
      }

    case "Subscribe":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.subscribe(request: request, context: context)
        }
      }

    case "Unsubscribe":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.unsubscribe(request: request, context: context)
        }
      }

    case "Publish":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.publish(request: request, context: context)
        }
      }

    case "Listen":
      return ServerStreamingCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listen(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}


// Provides conformance to `GRPCPayload` for request and response messages
extension Grpc_AuthRequest: GRPCProtobufPayload {}
extension Grpc_AuthResponse: GRPCProtobufPayload {}
extension Grpc_Request: GRPCProtobufPayload {}
extension Grpc_Response: GRPCProtobufPayload {}
extension Grpc_PutRequest: GRPCProtobufPayload {}
extension Grpc_PutResponse: GRPCProtobufPayload {}
extension Grpc_GetRequest: GRPCProtobufPayload {}
extension Grpc_GetResponse: GRPCProtobufPayload {}
extension Grpc_SubscribeRequest: GRPCProtobufPayload {}
extension Grpc_PublishRequest: GRPCProtobufPayload {}
extension Grpc_Publication: GRPCProtobufPayload {}

